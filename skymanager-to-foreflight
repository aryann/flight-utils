#!/usr/bin/env python
#
# A very simple script for converting SkyManager flight logs into the
# ForeFlight CSV format.

import datetime
import csv
import os
import sys

def process_date(date_str, year):
   month, day = date_str.split('/', 2)
   return datetime.date(year=year, month=int(month), day=int(day))


def process_route(departure, destination):
   res = departure.split() + destination.split()
   return [airport.upper() for airport in res]


def convert(f):
   flights = []
   year = None

   rows = list(csv.reader(f))
   header = rows[0]
   for i in xrange(len(rows)):
      row = rows[i]
      if not row[0] == 'edit':
         continue

      if '2016' <= row[1] <= '2020':
         year = int(row[1])
         continue

      date = process_date(row[header.index('Date')], year)
      route = process_route(row[header.index('From')], row[header.index('To')])

      if i + 1 < len(rows) and rows[i + 1] != 'edit':
         comments = rows[i + 1][0]
      else:
         comments = ''

      flight = {
         'Date': date.strftime('%Y-%m-%d'),
         'AircraftID': row[header.index('Aircraft')].split()[1],
         'TypeCode': row[header.index('Aircraft')].split()[0],
         'From': route[0],
         'To': route[-1],
         'Route': ' '.join(route[1:-1]),
         'TotalTime': row[header.index('Total Duration')],
         'PIC': row[header.index('Pilot In Command')],
         'Night': row[header.index('Night')],
         'Solo': row[header.index('Pilot In Command')],
         'CrossCountry': row[header.index('Cross Country')],
         'AllLandings': row[header.index('No Ldg')],
         'SimulatedInstrument': row[header.index('Simulated Instrument')],
         'DualReceived': row[header.index('Dual Received')],
         'InstructorComments': comments,
         'Make': 'Cessna',
         'Model': '162',
         'Category': 'Airplane',
         'Class': 'ASEL',
         'GearType': 'FT',
         'Complex': False,
         'HighPerformance': False,
         'Pressurized': False,
      }
      flights.append(flight)

   return flights


if __name__ == '__main__':
   if len(sys.argv) != 2:
      raise ValueError('USAGE: {0} CSV_FLIGHT_LOG'.format(sys.argv[0]))

   with open(os.path.expanduser(sys.argv[1])) as f:
      flights = convert(f)

   writer = csv.DictWriter(sys.stdout, fieldnames=sorted(flights[0].keys()))
   writer.writeheader()
   for flight in flights:
      writer.writerow(flight)
